{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\nexport interface InitializeOptions {\n  /**\n   * Your Mixpanel API token\n   *\n   * @required\n   */\n  token: string;\n  /**\n   * Enable or disable autotracking\n   *\n   * @default true\n   */\n  autotrack?: boolean;\n  /**\n   * Opting users out of tracking by this Mixpanel instance by default\n   *\n   * @default false\n   */\n  optOutByDefault?: boolean;\n  /**\n   * Enable or disable debug mode\n   *\n   * @default false\n   */\n  debug?: boolean;\n}\n\nexport interface TrackOptions {\n  /**\n   * The name of the event. This can be anything the user does - 'Button Click', 'Sign Up', 'Item Purchased', etc.\n   *\n   * @required\n   */\n  event: string;\n  /**\n   * A set of properties to include with the event you're sending. These describe the user who did the event or details about the event itself.\n   *\n   * @default {}\n   */\n  properties?: TrackProperties;\n}\n\nexport interface TrackProperties {\n  [key: string]: any;\n}\n\nexport interface IdentifyOptions {\n  /**\n   * A string that uniquely identifies a user. If not provided, the distinct_id currently in the persistent store (cookie or localStorage) will be used.\n   */\n  distinctId?: string;\n}\n\nexport interface AliasOptions {\n  /**\n   * A unique identifier that you want to use for this user in the future.\n   *\n   * @required\n   */\n  alias: string;\n  /**\n   * The current identifier being used for this user.\n   */\n  distinctId?: string;\n}\n\nexport interface SuperPropertyOptions {\n  /**\n   * An associative array of properties to store about the user\n   *\n   * @required\n   */\n  properties?: any;\n}\n\nexport interface ProfileProperties {\n  /**\n   * An associative array of properties to store about the user\n   *\n   * @required\n   */\n  properties?: any;\n}\n\nexport interface ChargeOptions {\n  /**\n   * The amount of the transaction\n   *\n   * @required\n   */\n  amount: number;\n  /**\n   * An associative array of properties to store about the transaction\n   *\n   * @default {}\n   */\n  properties?: any;\n}\n\nexport interface OptInOptions {\n  /**\n   * String that uniquely identifies the current user.\n   */\n  distinctId?: string;\n  /**\n   * An associative array of properties to store about the user\n   */\n  properties?: any;\n}\n\nexport interface MixpanelPlugin {\n  /**\n   * Initialize the plugin (web only)\n   *\n   * @platforms web\n   */\n  initialize(options: InitializeOptions): Promise<void>;\n\n  /**\n   * Returns the current distinct id of the user. This is either the id automatically generated by the library or the id that has been passed by a call to identify().\n   *\n   * @platforms ios, android, web\n   */\n  distinctId(): Promise<{ value: string }>;\n\n  /**\n   * Tracks an event with properties. Properties are optional and can be added only if needed.\n   *\n   * @platforms ios, android, web\n   */\n  track(options: TrackOptions): Promise<void>;\n\n  /**\n   * Identify a user with a unique ID to track user activity across devices, tie a user to their events, and create a user profile. If you never call this method, unique visitors are tracked using a UUID generated the first time they visit the site.\n   *\n   * @platforms ios, android, web\n   */\n  identify(options: IdentifyOptions): Promise<void>;\n\n  /**\n   * The alias method creates an alias which Mixpanel will use to remap one id to another. Multiple aliases can point to the same identifier.\n   *\n   * @platforms ios, android, web\n   */\n  alias(options: AliasOptions): Promise<void>;\n\n  /**\n   * Clears super properties and generates a new random distinct_id for this instance. Useful for clearing data when a user logs out.\n   *\n   * @platforms ios, android, web\n   */\n  reset(): Promise<void>;\n\n  /**\n   * Clears all currently set super properties.\n   *\n   * @platforms ios, android, web\n   */\n  clearSuperProperties(): Promise<void>;\n\n  /**\n   * Returns the currently set super properties.\n   *\n   * @platforms ios, android, web\n   */\n  currentSuperProperties(): Promise<{ properties: any }>;\n\n  /**\n   * Register super properties that will be sent with every event.\n   *\n   * @platforms ios, android, web\n   */\n  registerSuperProperties(options: SuperPropertyOptions): Promise<void>;\n\n  /**\n   * Set properties on the current user in Mixpanel People.\n   *\n   * @platforms ios, android, web\n   */\n  setProfile(options: ProfileProperties): Promise<void>;\n\n  /**\n   * Union list properties.\n   *\n   * @platforms ios, android, web\n   */\n  setProfileUnion(options: ProfileProperties): Promise<void>;\n\n  /**\n   * Permanently deletes the current people analytics profile from Mixpanel (using the current distinctId).\n   *\n   * @platforms ios, android, web\n   */\n  deleteProfile(): Promise<void>;\n\n  /**\n   * Track money spent by the current user for revenue analytics and associate properties with the charge. Properties is optional.\n   *\n   * @platforms ios, android, web\n   */\n  trackCharge(options: ChargeOptions): Promise<void>;\n\n  /**\n   * Uploads queued data to the Mixpanel server. (only ios, android)\n   *\n   * @platforms ios, android\n   */\n  flush(): Promise<void>;\n\n  /**\n   * Opt in tracking.\n   *\n   * Use this method to opt in an already opted out user from tracking. People updates and track calls will be sent to Mixpanel after using this method.\n   *\n   * @platforms ios, android, web\n   */\n  optInTracking(options: OptInOptions): Promise<void>;\n\n  /**\n   * Opt out tracking.\n   *\n   * This method is used to opt out tracking. This causes all events and people request no longer to be sent back to the Mixpanel server.\n   *\n   * @platforms ios, android, web\n   */\n  optOutTracking(): Promise<void>;\n\n  /**\n   * Returns the current opt-out status.\n   *\n   * @platforms ios, android, web\n   */\n  hasOptedOutTracking(): Promise<{ value: boolean }>;\n}\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    Mixpanel?: {\n      /**\n       * Mixpanel Token\n       *\n       * @required\n       * @example \"asdf1234asdf1234\"\n       */\n      token?: string;\n\n      /**\n       * Optional. Whether or not to collect common mobile events. Default is true.\n       *\n       * @default true\n       */\n      trackAutomaticEvents?: boolean;\n\n      /**\n       * Optional. Whether or not Mixpanel can start tracking immediately. Default is false.\n       *\n       * @required\n       * @default false\n       */\n      optOutTrackingByDefault?: boolean;\n\n      /**\n       * Optional. Disables ip collection on iOS devices. Default is false.\n       * For Android, this is done via a meta-data property. See {@link https://help.mixpanel.com/hc/en-us/articles/115004494803}\n       *\n       * @required\n       * @default false\n       */\n      disableIosIpCollection?: boolean;\n\n      /**\n       * Optional. Mixpanel cluster URL or EU server URL. Defaults to US server.\n       *\n       * @default \"https://api.mixpanel.com\"\n       * @example \"https://api-eu.mixpanel.com/\"\n       */\n      serverURL?: string;\n    };\n  }\n}\n"]}